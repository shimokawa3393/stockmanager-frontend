import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { useNavigate } from "react-router-dom";
import api from "../api/axios";
import "../styles/Common.css";
import "../styles/StockDetailPage.css";

export default function StockDetailPage() {
  const { symbol } = useParams();
  const [data, setData] = useState(null);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [isSaved, setIsSaved] = useState(false);
  const [username, setUsername] = useState(null);
  const navigate = useNavigate();

  const token = localStorage.getItem("access_token");

  useEffect(() => {

    // „É¶„Éº„Ç∂„ÉºÂêç„ÇíÂèñÂæó
    if (token) {
      api
        .get("accounts/user/")
        .then((res) => setUsername(res.data.username))
        .catch(() => setUsername(null));
    }

    // ÈäòÊüÑ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó
    const fetchDetails = async () => {
      try {
        const response = await api.get(
          `${process.env.REACT_APP_API_URL}/stockmanager/fetch/`,
          { params: { symbol } },
        );
        setData(response.data);
        setIsSaved(response.data.is_saved || false); // ‚Üê APIÂÅ¥„Åå‰øùÂ≠òÊ∏à„ÅøÊÉÖÂ†±„ÇÇËøî„Åó„Å¶„Åü„Çâ„Åì„Çå
      } catch (err) {
        setError("ÈäòÊüÑ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ");
      }
    };

    fetchDetails();
  }, [symbol]);


  // data „ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Çâ isSaved „Çí„Çª„ÉÉ„Éà
  useEffect(() => {
    if (data && typeof data.is_saved !== "undefined") {
      setIsSaved(data.is_saved);
    }
  }, [data]);


  // Ê§úÁ¥¢„Éú„Çø„É≥„ÇíÊäº„Åó„Åü„Çâ„ÄÅÊ§úÁ¥¢„ÉØ„Éº„Éâ„ÇíAPI„Å´ÈÄÅ‰ø°„Åó„Å¶„ÄÅÈäòÊüÑ„ÅÆ„Ç∑„É≥„Éú„É´„ÇíÂèñÂæó
  // ÈäòÊüÑ„ÅÆ„Ç∑„É≥„Éú„É´„ÇíÂèñÂæó„Åó„Åü„Çâ„ÄÅÈäòÊüÑ„ÅÆË©≥Á¥∞„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª
  const handleSearch = async () => {
    if (!searchTerm.trim()) {
      alert("‰ºÅÊ•≠Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      return;
    }

    try {
      const response = await api.post("/stockmanager/search/", {
        company_name: searchTerm,
      });

      const symbol = response.data.symbol;

      if (!symbol) {
        alert("„Ç∑„É≥„Éú„É´„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ");
        return;
      }

      // üî∏ „É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„ÅØÂ§â„Åà„Åö„ÄÅ„Éö„Éº„Ç∏„Å†„ÅëÈÅ∑Áßª
      navigate(`/stockdetail/${symbol}`);
    } catch (err) {
      console.error("Ê§úÁ¥¢„Ç®„É©„Éº:", err);
      alert("ÈäòÊüÑ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ");
    }
  };

  // „É≠„Ç∞„Ç¢„Ç¶„Éà
  const handleLogout = () => {
    localStorage.removeItem("access_token");
    localStorage.removeItem("refresh_token");
    setUsername(null);
    navigate("/login");
  };

  // „ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†/ÂâäÈô§
  const toggleSave = async () => {
    try {
      if (isSaved) {
        await api.post("stockmanager/remove/", { symbol });
        setIsSaved(false);
      } else {
        await api.post("stockmanager/save/", { symbol });
        setIsSaved(true);
      }
    } catch (err) {
      alert("„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
    }
  };

  // „Ç®„É©„ÉºË°®Á§∫
  if (error) return <span className="error-message">{error}</span>;
  if (!data)
    return (
      <div className="loading-overlay">
        <div className="spinner" />
        Ë™≠„ÅøËæº„Åø‰∏≠...
      </div>
    );
    
  return (
    <div className="main-container">
      <div className="detail-common-wrapper">
        <header className="header">
          <div className="greeting">
            {username ? `${username} „Åï„Çì` : "„Ç≤„Çπ„Éà „Åï„Çì"}
          </div>
          <div className="nav-links">
            {username ? (
              <>
                <Link to="/mypage" className="nav-link">
                  „Éû„Ç§„Éö„Éº„Ç∏
                </Link>
                <button onClick={handleLogout} className="nav-link logout-button">
                  „É≠„Ç∞„Ç¢„Ç¶„Éà
                </button>
              </>
            ) : (
              <>
                <Link to="/login" className="nav-link">
                  „É≠„Ç∞„Ç§„É≥
                </Link>
                <Link to="/register" className="nav-link">
                  „É¶„Éº„Ç∂„ÉºÁôªÈå≤
                </Link>
              </>
            )}
          </div>
        </header>
        <div className="search-box">
          <input
            type="text"
            placeholder="‰ºÅÊ•≠Âêç„ÅßÊ§úÁ¥¢"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          <button onClick={handleSearch} className="search-button">
            Ê§úÁ¥¢
          </button>
        </div>
      </div>

      <div className="detail-stock-card">
        <strong>
          {data.symbol}
          <span
            className={`heart-icon ${isSaved ? "saved" : ""}`}
            onClick={toggleSave}
            title="„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†/ÂâäÈô§"
          >
            {isSaved ? "‚ù§Ô∏è" : "ü§ç"}
          </span>
        </strong>
        <h1>
          {data.metrics?.["‰ºÅÊ•≠Âêç"] || "ÂèñÂæóÂ§±Êïó"}{" "}
        </h1>
        <div className="info-item">
          <span className="info-label">WEB„Çµ„Ç§„Éà:</span>
          {data.metrics?.["WEB„Çµ„Ç§„Éà"] ? (
            <a
              href={data.metrics["WEB„Çµ„Ç§„Éà"]}
              target="_blank"
              rel="noopener noreferrer"
              className="info-link"
            >
              {data.metrics["WEB„Çµ„Ç§„Éà"]}
            </a>
          ) : (
            <span className="info-placeholder">-</span>
          )}
        </div>
        <div className="info-item">
          <span className="info-label">‰ºÅÊ•≠Ê¶ÇË¶Å:</span>
          <p className="info-text summary-scroll">
            {data.metrics?.["‰ºÅÊ•≠Ê¶ÇË¶Å"] || <span className="info-placeholder">-</span>}
          </p>
        </div>
        <h2>
          <strong>Ê†™‰æ°:</strong> {data.metrics?.["Ê†™‰æ°"] || "-"}
        </h2>
        <ul>
          {Object.entries(data.metrics || {})
            .filter(([key]) => key !== "‰ºÅÊ•≠Âêç" && key !== "WEB„Çµ„Ç§„Éà" && key !== "‰ºÅÊ•≠Ê¶ÇË¶Å" && key !== "Ê†™‰æ°")
            .map(([key, value]) => (
              <li key={key}>
                <strong>{key}:</strong> {value}
              </li>
            ))}
        </ul>
        <Link to="/" className="back-link">
          ‚Üê ‰∏ÄË¶ß„Å´Êàª„Çã
        </Link>
      </div>
    </div>
  );
}
